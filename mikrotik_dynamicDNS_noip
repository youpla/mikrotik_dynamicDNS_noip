# based on : 
# https://wiki.mikrotik.com/wiki/Dynamic_DNS_Update_Script_for_dynDNS
# https://wiki.mikrotik.com/wiki/Dynamic_DNS_Update_Script_for_No-IP_DNS

# version
# 1.0 # does the job
#

#Note: When entering group credentials on a Dynamic DNS client, enter: groupname:username in the username field of the Dynamic DNS client and use the group password

#:local username "username"
:local username "group#username"
:local password "password"
:local hostname "domain.tld"

:local url "dummy"
:local previousIP


:log info "UpdateNo-IP: starts"

:if ([:len [/file find name=noip.txt]] > 0) do={
   :local ipfile [/file get noip.txt contents]
   :local ipstart ([find $ipfile " " -1] + 1)
   :local ipend ([:len $ipfile] -2)
   :set previousIP [:pick $ipfile $ipstart $ipend]
} else={
   :set previousIP "0.0.0.0"
}
:log info ("UpdateNo-IP: previousIP = $previousIP")

# get the current IP address from the internet (in case of double-nat)
/tool fetch mode=http address="checkip.dyn.com" src-path="/" dst-path="/noip.checkip.html"
:delay 1
:local result [/file get noip.checkip.html contents]

# parse the current IP result
:local resultLen [:len $result]
:local startLoc ([:find $result ": " -1] + 2)
:local endLoc [:find $result "</body>" -1]
:local currentIP [:pick $result $startLoc $endLoc]

:log info ("Update Infomaniak dynamic dns: previousIP = ===".$previousIP."=== currentIP = ===".$currentIP."===")

:if ($currentIP != $previousIP) do={
	:log info "UpdateNo-IP: Current IP $currentIP is not equal to previous IP, update needed"

	# The update URL. Note the "\3F" is hex for question mark (?). Required since ? is a special character in commands.
	:local url "https://dynupdate.no-ip.com/nic/update\3Fmyip=$currentIP"

	:log info "UpdateNo-IP: Sending update for $hostname"
	/tool fetch url=($url . "&hostname=$hostname") user=$username password=$password mode=https dst-path=("noip.txt")
	:delay 1
	:log info "UpdateNo-IP: Host $hostname updated on No-IP with IP $currentIP"

	:delay 1

	:local result [/file get noip.txt contents]
	:local resend ([:len $result] -2)
	:set result [:pick $result 0 $resend]
	:log info "UpdateNo-IP: NOIP Update Result: $result ==="

}  else={
	:log info "UpdateNo-IP: Previous IP $previousIP is equal to current IP, no update needed"


}



 
